#lang sicp
(define (ques-3 test-lst)
  
(define abcd '(A B C D E F G H I J K L M N O P Q R S T U V W X Y Z))

(define (alpha-index abcd-lst char)
  (if (equal? (car abcd-lst) char) 0
      (+ 1 (alpha-index (cdr abcd-lst) char))))
(define (get-alpha index abcd-lst)
  (if (= index 0) (car abcd-lst)
      (get-alpha (- index 1 ) (cdr abcd-lst))))
  (if (null? test-lst) '()
      (let ((n (alpha-index abcd (car test-lst))))
         (cond ((< (modulo n 7) 4) (cons (get-alpha (modulo (- n 4) 26) abcd) (ques-3 (cdr test-lst))))
               (else (cons (get-alpha (modulo (+ n 4) 26) abcd) (ques-3 (cdr test-lst))))))))
(ques-3 '(A D C E))

